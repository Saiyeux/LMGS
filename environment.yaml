name: LMGS
channels:
  - pytorch
  - conda-forge
  - defaults

dependencies:
  # Core Python and package management
  - python=3.8.18
  - pip=23.0.1

  # PyTorch ecosystem (CUDA 11.6 compatible)
  - pytorch=1.12.1
  - torchaudio=0.12.1
  - torchvision=0.13.1
  - cudatoolkit=11.6

  # Core scientific computing
  - numpy>=1.21.0
  - scipy>=1.7.0
  - matplotlib>=3.3.0

  # Computer vision and image processing
  - opencv=4.8.0
  - pillow>=8.0.0

  # 3D processing and visualization
  - plyfile=0.8.1
  - trimesh
  - open3d==0.17.0

  # Progress bars and CLI utilities
  - tqdm
  - rich

  # Configuration and data handling
  - pyyaml
  - h5py>=3.1.0

  # Development tools
  - ruff
  - black
  - flake8

  # GUI and visualization (Qt-based)
  - pyqt5
  - pyopengl
  - glfw

  # Jupyter development environment
  - jupyterlab
  - ipython

  # pip-installed packages
  - pip:
    # Hybrid SLAM core package
    - -e .

    # MonoGS CUDA extensions (will be installed manually)
    # Note: These require manual installation due to CUDA compilation
    # - ./thirdparty/MonoGS/submodules/simple-knn
    # - ./thirdparty/MonoGS/submodules/diff-gaussian-rasterization

    # Computer vision and deep learning
    - opencv-python==4.8.1.78
    - kornia==0.4.1
    - einops==0.3.0
    - albumentations==0.5.1

    # PyTorch Lightning and metrics
    - pytorch-lightning==1.3.5
    - torchmetrics==0.6.0

    # EfficientLoFTR specific
    - ray>=1.0.1
    - loguru==0.5.3
    - yacs>=0.1.8
    - joblib>=1.0.1

    # 3D math and utilities
    - PyGLM
    - munch

    # Evaluation and metrics
    - evo==1.11.0
    - lpips

    # Experiment tracking
    - wandb

    # Visualization utilities
    - imgviz
    - seaborn>=0.11

    # Testing framework
    - pytest>=6.0
    - pytest-cov>=2.0

    # Development utilities
    - autopep8
    - pylint

# Post-installation notes:
# After creating the environment, run these commands:
#
# 1. Activate environment:
#    conda activate LMGS
#
# 2. Install MonoGS CUDA extensions:
#    cd thirdparty/MonoGS
#    pip install ./submodules/simple-knn
#    pip install ./submodules/diff-gaussian-rasterization
#
# 3. Install hybrid-slam package:
#    cd ../..
#    pip install -e .
#
# 4. Download EfficientLoFTR model weights:
#    python scripts/download_models.py --models outdoor indoor
#
# 5. Test installation:
#    python run_hybrid_slam.py --mock --no-vis